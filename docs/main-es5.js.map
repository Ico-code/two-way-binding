{"version":3,"sources":["webpack:///src/environments/environment.ts","webpack:///src/app/server/server.component.ts","webpack:///src/app/server/server.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/servers/servers.component.ts","webpack:///src/app/servers/servers.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["environment","production","ServerComponent","serverId","serverStatus","selector","templateUrl","styleUrls","AppComponent","title","AppModule","declarations","imports","providers","bootstrap","ServersComponent","allowNewServer","ServerCreationStatus","ServerName","setTimeout","event","target","value","onCreateServer","bootstrapModule","err","console","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-server',\r\n  templateUrl: './server.component.html',\r\n  styleUrls: ['./server.component.css']\r\n})\r\nexport class ServerComponent implements OnInit {\r\n\r\n\r\n  serverId: number = 19;\r\n  serverStatus : string = \"offline\";\r\n  constructor() { }\r\n  getServerStatus(){\r\n    return this.serverStatus\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<section class=\"app-server\">\r\n    <h1>Server Component</h1>\r\n    <p>{{ 'Server' }} with ID {{ serverId }} is {{ getServerStatus() }}</p>\r\n</section>","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'custom-component';\r\n}\r\n","<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Document</title>\r\n</head>\r\n<body>\r\n  <div>\r\n    <section>\r\n        <h1>I'm in the App Component</h1>\r\n    </section>\r\n    <app-servers></app-servers>\r\n</div>\r\n</body>\r\n</html>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ServerComponent } from './server/server.component';\r\nimport { ServersComponent } from './servers/servers.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ServerComponent,\r\n    ServersComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule  \r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  //selector: '.app-servers',\r\n  //selector: '[app-servers]',\r\n  selector: 'app-servers',\r\n  templateUrl: './servers.component.html',\r\n  styleUrls: ['./servers.component.css']\r\n})\r\nexport class ServersComponent implements OnInit {\r\n\r\n\r\n  allowNewServer:boolean = false;\r\n  ServerCreationStatus = \"No server was created!\";\r\n  ServerName =\"Testserver\";\r\n\r\n\r\n  constructor() {\r\n    setTimeout(() => {\r\n      this.allowNewServer = true;\r\n    },2000);\r\n   }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onCreateServer(){\r\n    this.ServerCreationStatus = \"Server was Created! Server name is \" + this.ServerName;\r\n  }\r\n\r\n  onUpdateServerName(event:Event){\r\n    this.ServerName = (<HTMLInputElement>event.target).value;\r\n  }\r\n\r\n}\r\n","<section>\r\n    <label>Server name</label>\r\n    <!--<input \r\n        type=\"text\"\r\n        class=\"form-control\"\r\n        (input)=\"onUpdateServerName($event)\"> -->\r\n    <input \r\n        type=\"text\"\r\n        class=\"form-control\"\r\n        [(ngModel)]=\"ServerName\">\r\n    <button \r\n    [disabled]=\"!allowNewServer\" \r\n    class=\"btn btn-primary\"\r\n    (click)=\"onCreateServer()\">Add Server</button>\r\n    <hr>\r\n   <!-- <p class=\"sisennys\">{{ ServerName }}</p> -->\r\n    <p class=\"sisennys\">{{ ServerCreationStatus }}</p>\r\n    <app-server></app-server>\r\n</section>","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}